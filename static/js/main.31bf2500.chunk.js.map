{"version":3,"sources":["Project files/TodoListItem.js","Project files/TodoList.js","Project files/TodoController.js","App.js","serviceWorker.js","index.js"],"names":["TodoListItem","props","el","updateTodo","index","listLength","useState","title","editTitle","setEditTitle","style","done","editMode","setEditMode","key","id","type","checked","onChange","markTodo","value","e","target","onClick","deleteTodo","disabled","moveUp","moveDown","TodoList","todoList","list","map","length","TodoController","newTodo","setNewTodo","addNewTodo","App","setList","newTitle","Math","random","newList","filter","i","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.31bf2500.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport '../App.css';\r\nfunction TodoListItem(props) {\r\n    const {el, updateTodo, index, listLength} = props\r\n    const [editTitle, setEditTitle] = useState(el.title)\r\n    const editButtonHandler = () => {\r\n        updateTodo(editTitle, el.id)\r\n        setEditMode(false)\r\n        setEditTitle(\"\");\r\n    }\r\n    const style = el.done === true ? {\"textDecoration\": \"line-through\"} : null;\r\n    const [editMode, setEditMode] = useState(false)\r\n    return (\r\n        <div>\r\n            <li  key = {el.id} style={style}>\r\n                <>\r\n                    <input type=\"checkbox\" checked={el.done} onChange={() => props.markTodo(el.id)}/>\r\n                    {el.title}\r\n                    {editMode ? <> <input type=\"text\" value={editTitle} onChange={(e) => setEditTitle(e.target.value)}/>\r\n                            <button onClick={editButtonHandler}> Save</button>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <button onClick={() => props.deleteTodo(el.id)}> delete</button>\r\n                            <button onClick={() => setEditMode(!editMode)}>Edit</button>\r\n                            <button disabled={!index} onClick={() => props.moveUp(props.index)}>↑</button>\r\n                            <button disabled={index===(listLength -1)}\r\n                                    onClick={() => props.moveDown(props.index)}>↓\r\n                            </button>\r\n\r\n                        </>}\r\n                </>\r\n\r\n            </li>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoListItem;\r\n\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport TodoListItem from \"./TodoListItem\";\r\n\r\nfunction TodoList(props) {\r\n    const todoList = props.list;\r\n\r\n    return (\r\n        <div>\r\n            <center>\r\n\r\n                {todoList.map((el, index) =>\r\n                    <TodoListItem key={el.id}\r\n                                  el={el}\r\n                                  deleteTodo={props.deleteTodo}\r\n                                  updateTodo={props.updateTodo}\r\n                                  markTodo={props.markTodo}\r\n                                  index={index}\r\n                                  moveUp={props.moveUp}\r\n                                  moveDown={props.moveDown}\r\n                                  listLength = {todoList.length}\r\n                    />\r\n                )}\r\n\r\n            </center>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import React, {useState} from 'react';\r\nimport '../App.css';\r\n\r\nfunction TodoController(props) {\r\n    const [newTodo, setNewTodo] = useState(\"\")\r\n    const buttonHandler = () => {\r\n        props.addNewTodo(newTodo)\r\n        setNewTodo(\"\");\r\n    }\r\n    return (\r\n        <div>\r\n            <center>\r\n                {\"name of new Task\"}\r\n                <input value={newTodo} onChange={(e) => setNewTodo(e.target.value)}/>\r\n                <button onClick={buttonHandler}> addNewTodo</button>\r\n\r\n\r\n            </center>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoController;\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./Project files/TodoList\";\r\nimport TodoController from \"./Project files/TodoController\";\r\n\r\nfunction App() {\r\n    const [list, setList] = useState(\r\n        [{id: 1, title: \"Object One\", done: false},\r\n            {id: 2, title: \"Object Two\", done: false},\r\n            {id: 3, title: \"Object Three\", done: true}])\r\n    const addNewTodo = (newTitle) => {\r\n        const newTodo = {id: Math.random(), title: newTitle, done: false}\r\n        const newList = [...list, newTodo]\r\n        setList(newList)\r\n    }\r\n    const deleteTodo = (id) => {\r\n        const newList = [...list].filter(el => el.id !== id)\r\n        setList(newList)\r\n    }\r\n    const updateTodo = (newTitle, id) => {\r\n        const newList = list.map((el) => {\r\n            if (id === el.id) return {...el, title: newTitle}\r\n            return el\r\n        })\r\n        setList(newList)\r\n    }\r\n    const markTodo = (id) => {\r\n        const newList = list.map((el) => {\r\n            if (el.id === id) return {...el, done: !el.done}\r\n            return el\r\n        })\r\n        setList(newList)\r\n    }\r\n    const moveUp = (index) => {\r\n        if (index === 0)\r\n            return\r\n        const newList = list.map((el, i) => {\r\n            if (index === i) return list[index - 1];\r\n            if (index === i + 1) return list[index];\r\n            return el\r\n            })\r\n        setList(newList)\r\n\r\n\r\n    }\r\n    const moveDown = (index) => {\r\n            const newList = list.map((el, i) => {\r\n            if (index === i) return list[index + 1];\r\n            if (index === i - 1) return list[index];\r\n            return el\r\n        })\r\n        setList(newList)\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <TodoController addNewTodo={addNewTodo}/>\r\n            <TodoList list={list}\r\n                      deleteTodo={deleteTodo}\r\n                      updateTodo={updateTodo}\r\n                      markTodo={markTodo}\r\n                      moveUp={moveUp}\r\n                      moveDown={moveDown}\r\n\r\n            />\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}